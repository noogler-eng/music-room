// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user 
// space
// active stream
// stream history

enum provider {
  Google
}

enum streamType {
  Spotify
  Youtube
}

// every user will have buch of stream
// every user will upvote in many streams many time
model User{
  id          String     @id @default(uuid())
  name        String
  provider    provider
  email       String  @unique
  stream      Stream[]
  upvotes     Upvote[]
}

// every stream will have bucnh of upvotes
model Stream{
  id          String     @id @default(uuid())
  type        streamType
  active      Boolean @default(true)
  url         String
  title       String
  smallImg    String
  bigImg      String
  upvotes     Upvote[] 
  creator     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     
  extractedId String
}

// how single upvote look like this
model Upvote{
  id          String     @id @default(uuid())
  upvoter     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  streamTo    Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    String
  // it must be unique means userId must upvote an stream only single time
  @@unique([userId, streamId])
}